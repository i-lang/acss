@import '../../base/_default';
@import 'compass/css3';
@import '../../base/util';

@mixin divider-x-style {
  height: 100%;
  position: absolute;
  top: 0;
}

[acss-divider-x] > * {
  position: relative;

  &:before {
    @include divider-x-style;
  }

  &:last-child:after {
    @include divider-x-style;
  }

  &:not(:first-child):before {
    content: '';
  }
}

@mixin build-divider-x($rwd, $divider-gap) {
  [acss-gap-x~="#{$divider-gap}#{$rwd}"][acss-divider-x] {
    > :before {
      left: px(-$divider-gap / 2);
    }

    > :last-child:after {
      right: px(-$divider-gap / 2);
    }
  }
}

@mixin build-divider-x-attribute($rwd) {
  $divider-gap: $min-divider-gap;
  @while ($divider-gap <= $max-divider-gap) {
    @include build-divider-x($rwd, $divider-gap);
    $divider-gap: $divider-gap + 5;
  }

  [acss-divider-x~="around#{$rwd}"] {
    > :first-child:before {
      content: '' !important;
    }

    > :last-child:after {
      content: '' !important;

    }
  }
}

@mixin build-divider-x-thickness($rwd, $thickness) {
  [acss-divider-x~="#{$thickness}#{$rwd}"] {
    > :before, > :last-child:after {
      width: px($thickness);
      @include translateX(px(round(-$thickness/2)));
    }
  }
}

@mixin build-divider-x-thickness-attribute($rwd) {
  $divider-thickness: $min-divider-thickness;
  @while ($divider-thickness <= $max-divider-thickness) {
    @include build-divider-x-thickness($rwd, $divider-thickness);
    $divider-thickness: $divider-thickness + 1;
  }
}

@mixin build-divider-x-attributes($rwd) {
  @include build-divider-x-attribute($rwd);
  @include build-divider-x-thickness-attribute($rwd);
}
