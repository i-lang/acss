@import "td-color";

@WJH: Microsoft JhengHei;

.td, [class*=" td-"], [class^="td-"] {
  .tdBorderRadius(30);
  .tdBorderSize(10);
  .tdColor();
  .tdFontSize(30, 8);
  .tdFontFamily();
  .tdLineHeight(3, 1);
  .tdTextAlign();
  .tdRadiusBuild(30, 1);
  .tdSizeBuild(200, 5, 20);

  &.is-pointer {
    cursor: pointer;
  }

  &.is-circle {
    .setCircle();
  }

  &.is-triangle {
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 165px 220.5px 0 220.5px;
  }

  &.is-cuttable {
    overflow: hidden;
  }
}

.setCircle() {
  -webkit-border-radius: 100%;
  -moz-border-radius: 100%;
  border-radius: 100%;
  overflow: hidden;
}

.tdSizeBuild(@size, @diff, @min) when (@size >= @min) {
  .tdSizeBuild(@size - @diff, @diff, @min);

  &[data-size="@{size}"] {
    min-width: @size * 1px;
    height: @size * 1px;
  }
  &[data-size^="@{size}x"] {
    min-width: @size * 1px;
  }

  &[data-size$="x@{size}"] {
    height: @size * 1px;
  }
}

.tdRadiusBuild(@size, @diff) when (@size >=1) {
  .tdRadiusBuild(@size - @diff, @diff);

  &[data-radius="@{size}"] {
    border-radius: @size * 1px;
  }
}

.tdFontSize(@fontSize, @minSize) when (@fontSize >= @minSize) {
  .tdFontSize(@fontSize - 2, @minSize);

  &[data-font-size="@{fontSize}"] {
    font-size: @fontSize * 1px;
  }
}

.tdBorderSize(@width) when (@width >= 0) {
  .tdBorderSize(@width - 1);
  &[data-border="@{width}"] {
    border: @width*1px solid;
  }
}

.tdBorderRadius(@radius) when (@radius >= 0) {
  .tdBorderRadius(@radius - 2);
  &[data-border-radius="@{radius}"] {
    .borderRadius(@radius);
  }
}

.borderRadius(@radius) {
  border-radius: @radius * 1px;
}

.y-pad(@padding) {
  padding-top: @padding * 1px;
  padding-bottom: @padding * 1px;
}

.x-pad(@padding) {
  padding-left: @padding * 1px;
  padding-right: @padding * 1px;
}

.tdFontFamily() {
  .tdFontFamily("WJH", @WJH);
}

.tdFontFamily(@FamilyName, @Family) {
  &[data-font-family="@{FamilyName}"] {
    font-family: @Family;
  }
}

.tdLineHeight(@lineHeight, @minLineHeight) when (round(@lineHeight, 1) >= @minLineHeight) {
  .tdLineHeight(@lineHeight - 0.1, @minLineHeight);

  @roundedLineHeight: round(@lineHeight, 1);
  &[data-line-height="@{roundedLineHeight}"] {
    line-height: @lineHeight * 1em;
  }
}

.tdTextAlign() {
  &[data-text-align=left] {
    text-align: left;
  }

  &[data-text-align=center] {
    text-align: center;
  }

  &[data-text-align=right] {
    text-align: right;
  }
}